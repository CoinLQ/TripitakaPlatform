diff --git a/TripitakaPlatform/settings/defaults.py b/TripitakaPlatform/settings/defaults.py
index f3a24bf..bafa7e9 100644
--- a/TripitakaPlatform/settings/defaults.py
+++ b/TripitakaPlatform/settings/defaults.py
@@ -327,10 +327,10 @@ CELERY_IMPORTS = (
 
 ## 系统邮箱设置
 EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
-EMAIL_HOST = 'smtp.sina.cn'
+EMAIL_HOST = 'smtp.office365.com'
 EMAIL_PORT = 25
-EMAIL_HOST_USER = '17074810135@sina.cn'
-EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_PW', '')
+EMAIL_HOST_USER = 'lqdzj@longquan.org'
+EMAIL_HOST_PASSWORD = 'rsexrxes@2018'# os.environ.get('EMAIL_PW', '')
 EMAIL_USE_TLS = True
 EMAIL_FROM = EMAIL_HOST_USER
 SERVER_EMAIL = EMAIL_HOST_USER
diff --git a/TripitakaPlatform/urls.py b/TripitakaPlatform/urls.py
index b1811ff..c1f9a19 100644
--- a/TripitakaPlatform/urls.py
+++ b/TripitakaPlatform/urls.py
@@ -24,7 +24,9 @@ from tasks.views.mark import *
 from tasks.views import lqtripitaka
 from tasks.views import tripitaka
 from tools.views import *
+from tdata.views import email_vericode
 import xadmin
+import tdata
  
 urlpatterns = [
     path('accounts/', include('django.contrib.auth.urls')),
@@ -32,6 +34,8 @@ urlpatterns = [
     path('manage/', xadmin.site.urls),
     url(r'^auth/', include("jwt_auth.urls", namespace="api-auth")),
     url(r'^api/', include('api.urls')),
+    url(r'^auth/api-vericode/', email_vericode),
+    url(r'^activate/(?P<token>[0-9a-zA-Z@.*$]+)/$', tdata.views.active_user, name='index'),
     path('correct/<int:task_id>/', do_correct_task, name='do_correct_task'),
     path('verify_correct/<int:task_id>/', do_correct_task, name='do_correct_verify_task'),
     path('correct_difficult/<int:task_id>/', do_correct_task, name='do_correct_task'),
diff --git a/tdata/models.py b/tdata/models.py
index 89c65d5..f84d764 100644
--- a/tdata/models.py
+++ b/tdata/models.py
@@ -129,6 +129,7 @@ class Reel(models.Model):
     ocr_ready = models.BooleanField(verbose_name='OCR数据状态', default=False)
     correct_ready = models.BooleanField(verbose_name='是否有文字校对经文', default=False)
     used_in_collation = models.BooleanField(verbose_name='是否用于校勘', default=True)
+    bar_line_count = models.CharField('每栏文本行数', max_length=256, default='0')
 
     class Meta:
         verbose_name = '实体卷'
@@ -186,7 +187,7 @@ class Reel(models.Model):
 class ReelOCRText(models.Model):
     reel = models.OneToOneField(Reel, verbose_name='实体藏经卷', on_delete=models.CASCADE, primary_key=True, editable=False)
     text = SutraTextField('经文', blank=True, default='') #按实际行加了换行符，换页标记为p\n
-
+    
     class Meta:
         verbose_name = '实体藏经卷OCR经文'
         verbose_name_plural = '实体藏经卷OCR经文'
@@ -335,3 +336,17 @@ class Configuration(models.Model):
 
     def __str__(self):
         return '当前配置'
+
+class EmailVerifycode(models.Model):
+    # 验证码
+    code = models.CharField(max_length=20, verbose_name=u"验证码")
+    email = models.EmailField(max_length=50, verbose_name=u"邮箱")
+    username = models.CharField(max_length=100, verbose_name=u"用户名",default='')
+    # 包含注册验证和找回验证
+    send_type = models.CharField(verbose_name=u"验证码类型", max_length=10, choices=(("register",u"注册"), ("forget",u"找回密码")))
+    send_time = models.DateTimeField(verbose_name=u"发送时间", default=timezone.now)
+    class Meta:
+        verbose_name = u"邮箱验证码"
+        verbose_name_plural = verbose_name
+    def __unicode__(self):
+        return '{0}({1})'.format(self.code, self.email)
diff --git a/tdata/serializer.py b/tdata/serializer.py
index 3651931..6ae65ec 100644
--- a/tdata/serializer.py
+++ b/tdata/serializer.py
@@ -1,5 +1,6 @@
 from rest_framework import serializers
-from tdata.models import Page, LQSutra, LQReel, Sutra,Reel,Tripitaka,Volume
+from tdata.models import Page, LQSutra, LQReel, Sutra,Reel,Tripitaka,Volume,EmailVerifycode
+from TripitakaPlatform import email_send
 
 class PageSerializer(serializers.ModelSerializer):
     class Meta:
@@ -46,5 +47,16 @@ class VolumeSerializer(serializers.ModelSerializer):
     #     fields = ('tripitaka_code', 'vol_no', 'page_count')
     #     read_only_fields =('tripitaka_code', 'vol_no', 'page_count')
 
+class EmailVerifycodeSerializer(serializers.ModelSerializer):
+    class Meta:
+        model = EmailVerifycode
+        fields = '__all__'
+    def create(self, validated_data):
+        email = validated_data['email']
+        send_type = validated_data['send_type']
+        username = validated_data['username']
+        email_send.send_verifycode_email(email=email, send_type=send_type, username=username)
+        emailVerifycode = EmailVerifycode.objects.get(email=email)
+        return emailVerifycode
 
  
\ No newline at end of file
diff --git a/tdata/views.py b/tdata/views.py
index b893791..42effe6 100644
--- a/tdata/views.py
+++ b/tdata/views.py
@@ -1,10 +1,145 @@
 from django.shortcuts import render
 from rest_framework import mixins, viewsets
+from rest_framework import viewsets, permissions, mixins, generics
+from rest_framework.response import Response
+from rest_framework import status
 from rest_framework.decorators import detail_route, list_route
 from tdata.models import *
+from tdata.serializer import EmailVerifycodeSerializer
 from tdata.serializer import PageSerializer
+from django.http import HttpResponse
+from jwt_auth.models import Staff
+import base64  
 
 class PageViewSet(viewsets.ReadOnlyModelViewSet, mixins.ListModelMixin):
     queryset = Page.objects.all()
     serializer_class = PageSerializer
-    permission_classes = []
\ No newline at end of file
+    permission_classes = []
+
+class EmailVerifycodeView(mixins.CreateModelMixin, generics.GenericAPIView):
+    queryset = EmailVerifycode.objects.all()
+    permission_classes = (permissions.AllowAny, )
+    serializer_class = EmailVerifycodeSerializer
+
+    def post(self, request, *args, **kwargs):
+        try:
+            return self.create(request, *args, **kwargs)
+        except Exception as e:
+            return Response({"status": -1, "msg": str(e)}, status=status.HTTP_406_NOT_ACCEPTABLE)
+
+
+def active_user(request, token):
+    key = 'XIANHU'  
+    jiami_key, jiemi_key = suanfa(key)  
+    miwen = token
+    miwen = miwenToOld(miwen)
+    mingwen = bianma(jiemi_key, miwen)  
+    code = mingwen[-6:]
+    email = mingwen[:-6]
+    #验证激活码
+    try:
+        email_record = EmailVerifycode.objects.get(email=email)
+        if email_record.code == code and email_record.email == email:
+            staff = Staff.objects.get(email=email)
+            staff.is_active = True
+            staff.save()
+            return render(request, 'active_sucess.html', {'message':'激活成功请登录','url':"http://test.lqdzj.cn/login"})
+        else:
+            return render(request, 'active_fail.html', {'message':'激活未能成功。','url':request.path})
+    except Exception as e :
+        return render(request, 'active_fail.html', {'message':'激活出现异常:'+str(e),'url':request.path})
+    
+#加密 
+def suanfa(key):  
+    alp = '$ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789@.*'  
+    
+    jiami_key = {}  
+    jiemi_key = {}  
+  
+    list0 = list(alp)  
+    list1 = list(key)  
+    list2 = list(alp)  
+    for n in list1:  
+        for m in list2:  
+            if m == n:  
+                list2.remove(m)  
+  
+    alp1 = ''.join(list2)  
+    key1 = key + alp1  
+    list3 = list(key1)  
+  
+    a = 0  
+    if a < len(list0):  
+        for m in list0:  
+            jiami_key[m] = list3[a]  
+            a = a + 1  
+      
+    b = 0  
+    if b < len(list3):  
+        for n in list3:  
+            jiemi_key[n] = list0[b]  
+            b = b + 1  
+      
+    #print jiami_key  
+    #print jiemi_key  
+    return jiami_key, jiemi_key    
+#解密 
+def bianma(key_dic, data):  
+    list_data = list(data)  
+    data1 = []  
+    for a in list_data:  
+         if a == ' ':  
+             data1.append(a)  
+  
+         elif a.islower():  
+             a = a.upper()  
+             if a in key_dic.keys():  
+                 x = key_dic[a]  
+                 data1.append(x.lower())  
+  
+         elif a.isupper():  
+             if a in key_dic.keys():  
+                 x = key_dic[a]  
+                 data1.append(x)  
+         else:  
+             data1.append(a)  
+  
+    data2 = ''.join(data1)  
+    
+    #print data2  
+    return data2  
+
+def miwenToNew(key):
+    alp = '$ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789@.*' 
+    newKey = key
+    #重新排序
+    newKey = newKey[::-1]
+    #替换文字
+    words = ''
+    for item in newKey:
+        if item in alp:
+            index = alp.index(item)
+            words = words + alp[index+1]
+        else:
+            words = words + item
+    key = words
+    return key
+def miwenToOld(data2):
+    #解密。
+    #替换文字。
+    alp = '$ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789@.*' 
+    words = ''
+    newKey = data2
+    for item in newKey:
+        if item in alp:
+            index = alp.index(item)
+            words = words + alp[index-1]
+        else:
+            words = words + item
+    #重新排序。
+    newKey = words
+    newKey = newKey[::-1]
+    #明文。
+    data2 = newKey
+    return data2
+email_vericode = EmailVerifycodeView.as_view()
diff --git a/utils/initdb.sh b/utils/initdb.sh
index dfb03ca..0213fa6 100755
--- a/utils/initdb.sh
+++ b/utils/initdb.sh
@@ -2,6 +2,15 @@ sudo -u postgres psql <<END
 drop database if exists tripitaka_platform;
 drop user if exists lqzj;
 END
-sudo -u postgres psql -f utils/setup_db.sql
+sudo -u postgres psql -f utils/setup_db.sql 
+# sudo -u postgres psql -f /home/xian/tripitakaplatform/restore.sql
+
+# # ============ get the file name ===========    
+# Folder_A="/home/xian/Downloads/tripidata"    
+# for file_a in ${Folder_A}/*  
+# do    
+#     temp_file=`basename $file_a`    
+#     sudo -u postgres psql -f /home/xian/Downloads/tripidata/$temp_file    
+# done
 
 ./manage.py migrate
